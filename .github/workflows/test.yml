name: 🧪 Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_ENV: test
  CI: true

jobs:
  # ============================================================================
  # QUALITY GATES - Fast feedback for code quality issues
  # ============================================================================
  quality-gates:
    name: 🚦 Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🔍 TypeScript type checking
        run: npm run lint

      - name: 🔒 Security audit (high/critical only)
        run: npm audit --audit-level=high

      - name: 📊 License compliance check
        run: npx license-checker --onlyAllow 'MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;0BSD'

  # ============================================================================
  # UNIT TESTS - Core component validation
  # ============================================================================
  unit-tests:
    name: 🔬 Unit Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npx vitest run tests/chatManager.test.ts tests/mcpToolsIntegration.test.ts --reporter=verbose --coverage

      - name: 📊 Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unit-tests
          name: unit-test-coverage

  # ============================================================================
  # SECURITY TESTS - Critical vulnerability validation
  # ============================================================================
  security-tests:
    name: 🔐 Security Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🛡️ Run security tests
        run: npx vitest run tests/security.test.ts --reporter=verbose

      - name: 🔍 SAST with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >- 
            p/security-audit
            p/nodejs
            p/typescript

      - name: 🔒 Dependency vulnerability scan
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          echo "Audit completed, results saved"

      - name: 📋 Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            audit-results.json
            semgrep-results.json

  # ============================================================================
  # PERFORMANCE TESTS - Scalability and resource validation
  # ============================================================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🏃‍♂️ Run performance tests
        run: npx vitest run tests/performance.test.ts --reporter=verbose
        env:
          NODE_OPTIONS: '--expose-gc'

      - name: 📊 Generate performance report
        run: |
          echo "# Performance Test Results" > performance-report.md
          echo "## Test Execution Time" >> performance-report.md
          echo "Performance tests completed successfully" >> performance-report.md

      - name: 📈 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-report.md

  # ============================================================================
  # INTEGRATION TESTS - Component interaction validation
  # ============================================================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🔗 Run integration tests
        run: npx vitest run tests/mcpToolsIntegration.test.ts --reporter=verbose --coverage

      - name: 📊 Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: integration-tests
          name: integration-test-coverage

  # ============================================================================
  # E2E TESTS - Complete workflow validation
  # ============================================================================
  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🎭 Run E2E tests
        run: npx vitest run tests/e2e.test.ts --reporter=verbose --testTimeout=60000
        env:
          NODE_OPTIONS: '--expose-gc'

      - name: 📊 Generate E2E test report
        if: always()
        run: |
          echo "# E2E Test Results - Node.js ${{ matrix.node-version }}" > e2e-report-${{ matrix.node-version }}.md
          echo "E2E tests completed for Node.js ${{ matrix.node-version }}" >> e2e-report-${{ matrix.node-version }}.md

      - name: 📋 Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-node-${{ matrix.node-version }}
          path: e2e-report-${{ matrix.node-version }}.md

  # ============================================================================
  # COMPREHENSIVE TEST REPORT - Aggregate all results
  # ============================================================================
  test-report:
    name: 📊 Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests, performance-tests, integration-tests, e2e-tests]
    if: always()
    steps:
      - name: 📥 Download all test artifacts
        uses: actions/download-artifact@v3

      - name: 📊 Generate comprehensive test report
        run: |
          echo "# 🧪 Comprehensive Test Suite Results" > test-report.md
          echo "" >> test-report.md
          echo "## 📈 Test Execution Summary" >> test-report.md
          echo "- ✅ Quality Gates: ${{ needs.quality-gates.result }}" >> test-report.md
          echo "- 🔬 Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
          echo "- 🔐 Security Tests: ${{ needs.security-tests.result }}" >> test-report.md
          echo "- ⚡ Performance Tests: ${{ needs.performance-tests.result }}" >> test-report.md
          echo "- 🔗 Integration Tests: ${{ needs.integration-tests.result }}" >> test-report.md
          echo "- 🎭 E2E Tests: ${{ needs.e2e-tests.result }}" >> test-report.md
          echo "" >> test-report.md
          echo "## 🎯 Quality Metrics" >> test-report.md
          echo "- Code Coverage: Available in artifacts" >> test-report.md
          echo "- Security Scan: Available in artifacts" >> test-report.md
          echo "- Performance Benchmarks: Available in artifacts" >> test-report.md
          echo "" >> test-report.md
          echo "## 🚀 Deployment Readiness" >> test-report.md
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.security-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ **READY FOR DEPLOYMENT** - All critical tests passed" >> test-report.md
          else
            echo "❌ **NOT READY FOR DEPLOYMENT** - Critical tests failed" >> test-report.md
          fi

      - name: 📋 Upload comprehensive test report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: test-report.md

      - name: 💬 Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # ============================================================================
  # RELEASE VALIDATION - Pre-release comprehensive validation
  # ============================================================================
  release-validation:
    name: 🚀 Release Validation
    runs-on: ubuntu-latest
    needs: [test-report]
    if: github.ref == 'refs/heads/main' && needs.unit-tests.result == 'success' && needs.security-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build

      - name: 🧪 Smoke test built package
        run: node dist/index.js --help

      - name: ✅ Release validation complete
        run: |
          echo "🎉 All tests passed - ready for release!"
          echo "📊 Test Coverage: Comprehensive"
          echo "🔒 Security: Validated"
          echo "⚡ Performance: Verified"
          echo "🎭 E2E Scenarios: Confirmed"